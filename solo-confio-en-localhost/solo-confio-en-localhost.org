#+TITLE:     solo confío en localhost
#+AUTHOR:    Osiris Alejandro Gómez
#+EMAIL:     osiux@osiux.com
#+DATE:      2016-04-23
#+LANGUAGE:  es
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="osiux.css" />
#+OPTIONS: ::t *:t f:t num:nil |:t -:t H:3 toc:nil timestamp:nil tags:nil html-scripts:nil html-style:nil author:t creator:t email:nil emphasize:t

* █

  #+BEGIN_EXAMPLE
    ┏━┓┏━┓╻  ┏━┓   ┏━╸┏━┓┏┓╻┏━╸╻┏━┓
    ┗━┓┃ ┃┃  ┃ ┃   ┃  ┃ ┃┃┗┫┣╸ ┃┃ ┃
    ┗━┛┗━┛┗━╸┗━┛   ┗━╸┗━┛╹ ╹╹  ╹┗━┛

    ┏━╸┏┓╻   ╻  ┏━┓┏━╸┏━┓╻  ╻ ╻┏━┓┏━┓╺┳╸
    ┣╸ ┃┗┫   ┃  ┃ ┃┃  ┣━┫┃  ┣━┫┃ ┃┗━┓ ┃
    ┗━╸╹ ╹   ┗━╸┗━┛┗━╸╹ ╹┗━╸╹ ╹┗━┛┗━┛ ╹
  #+END_EXAMPLE

  - usando *SSH* podemos tener *acceso remoto seguro*
  - con tuneles *saltear Firewalls*
  - podemos usarlo para armar una *VPN*
  - *cifrar conexiones* a bases de datos

* Soy "OSiRiS" también conocido por "OSiUX"

  - trabajo en *gcoop Cooperativa de Software Libre*
  - pueden ver el corto *Códigos Cooperativos*

    http://gcoop.coop/codigos-cooperativos

  - programo en =PHP= y en =BASH=
  - últimamente hago mucho de SysAdmin
  - hago casi todo desde consola
  - no podría vivir sin =SSH=
  - soy desconfiado (me dicen paranoico)

* Compartiendo la Sesion

  En lugar de Slides estáticos, pueden conectarse a mi notebook
  y ver de cerca cómo me equivoco al tipear :)

  - desde una terminal

    #+BEGIN_EXAMPLE
      ssh flisol@caipiroska.lan
    #+END_EXAMPLE

  - desde de un browser

    - https://caipiroska.lan:4200/

* Qué es SSH?

  Si pensás que estas en la charla equivocada porque no sabés
  para qué es SSH y ya lo repetí muchas veces...acá una pista

  - para parecer un hacker de película
  - acceder remotamente a compus, routers, smartphones, etc

* Por qué usar SSH?

  - funciona con angosto de banda
  - automatizar tareas
  - acceder a muchos servidores
  - todo el tráfico viaja cifrado
  - saltear firewalls

* Túneles SSH

  Para qué sirven los túneles SSH?

** si tu ISP bloquea el puerto 25, usa el 2525 :)

    #+BEGIN_SRC sh :session :results none
      ssh -fN -L 2525:localhost:25 gin &
    #+END_SRC

** verificar tunel:

   #+BEGIN_SRC sh :session :results output :exports both
     nc -vz localhost 2525 2>&1
   #+END_SRC

   #+RESULTS:
   : Connection to localhost 2525 port [tcp/*] succeeded!

* Tunel Reverso

  - obtener acceso SSH salteando un firewall

    #+BEGIN_SRC sh :session :results none
      ssh -fN -R 2020:localhost:22 stout &
    #+END_SRC

  - test

    #+BEGIN_SRC sh :session :results output :exports both
      ssh stout -- nc -vz localhost 2020 2>&1
    #+END_SRC

    #+RESULTS:
    : Connection to localhost 2020 port [tcp/*] succeeded!

* Proxy SOCKS

** iniciar proxy

   #+BEGIN_SRC sh :session :results none
     ssh -fN -D 9090 gin &
   #+END_SRC

** navegar sin proxy

   #+BEGIN_SRC sh :session :results output :exports both
     curl pub.osiux.com/ip/index.php
   #+END_SRC

   #+RESULTS:
   : 181.109.9.31

** navegar con proxy (no usamos nuestra IP)

   #+BEGIN_SRC sh :session :results output :exports both
     curl --socks5 localhost:9090 pub.osiux.com/ip/index.php
   #+END_SRC

   #+RESULTS:
   : 198.23.230.106

   #+BEGIN_SRC sh :session :results output
     dig +short -x 198.23.230.106
   #+END_SRC

   #+RESULTS:
   : gin.osiux.com.


* Proxy SOCKS chat

** configurar proxy en cuentas:

   #+BEGIN_SRC sh :session :results output :exports both
     grep -C1 localhost ~/.purple/accounts.xml | sort -u
   #+END_SRC

   #+RESULTS:
   : --
   : 			<host>localhost</host>
   : 			<port>9129</port>
   : 			<type>socks5</type>

** configurar proxy en =~/.ssh/config=

   #+BEGIN_SRC sh :session :results output :exports both
     grep -B3 9129 ~/.ssh/config
   #+END_SRC

   #+RESULTS:
   : Host gin
   :      Hostname 198.23.230.106
   :      Port 22
   :      DynamicForward :9129

** verificar conexión

   #+BEGIN_SRC sh :session :results output :exports both
     netstat -puntoa | grep 198.23.230.106 | sed 's/ \+/ /g'
   #+END_SRC

   #+RESULTS:
   : tcp 0 0 192.168.43.182:48873 198.23.230.106:80 TIME_WAIT - timewait (37,54/0/0)
   : tcp 0 1 192.168.43.182:48874 198.23.230.106:80 FIN_WAIT1 - on (1,01/0/0)
   : tcp 0 0 192.168.43.182:40957 198.23.230.106:22 ESTABLISHED 7146/ssh keepalive (6757,39/0/0)
   : tcp 0 0 192.168.43.182:48872 198.23.230.106:80 TIME_WAIT - timewait (20,35/0/0)

* NO Passwords
** Generar llave

   #+BEGIN_SRC sh :session :results output
     ssh-keygen -t rsa -b 4096 -P secreto -f ~/.ssh/seguro
   #+END_SRC

   #+RESULTS:
   #+begin_example
   Generating public/private rsa key pair.
   Your identification has been saved in /home/osiris/.ssh/seguro.
   Your public key has been saved in /home/osiris/.ssh/seguro.pub.
   The key fingerprint is:
   56:88:72:87:92:50:67:25:71:09:db:27:c6:3a:43:1f osiris@caipiroska
   The key's randomart image is:
   +---[RSA 4096]----+
   |  ... *+o.       |
   |   . + O..       |
   |    + * E o      |
   |     = = =       |
   |      + S        |
   |       +         |
   |                 |
   |                 |
   |                 |
   +-----------------+
#+end_example

** AgentForwarding

   #+BEGIN_EXAMPLE
     ssh-add ~/.ssh/id_rsa
   #+END_EXAMPLE

   #+BEGIN_SRC sh :session :results output
     ssh-agent
   #+END_SRC

   #+RESULTS:
   : SSH_AUTH_SOCK=/tmp/ssh-yaQQtEwiEWnr/agent.3695; export SSH_AUTH_SOCK;
   : SSH_AGENT_PID=3696; export SSH_AGENT_PID;
   : echo Agent pid 3696;

   #+BEGIN_SRC sh :session :results output
     eval `ssh-agent`
   #+END_SRC

   #+RESULTS:
   : Agent pid 3886

** listar llaves en agente

   #+BEGIN_SRC sh :session :results output
     ssh-add -l | awk '{print $2}'
   #+END_SRC

   #+RESULTS:
   : 8f:6b:e1:7e:6a:94:8f:61:a4:db:2a:8a:e8:43:f3:12
   : 60:e6:e4:f2:ae:b6:f7:3a:58:ca:e9:58:a5:06:d2:42
   : e6:bd:6d:f7:e1:d7:85:3a:26:38:8d:b7:f7:c6:6b:7d

** keychain

   #+BEGIN_EXAMPLE
     if [ -e /usr/bin/keychain ]
     then
        eval `keychain -q --eval --agents ssh id_rsa`
        eval `keychain -q --eval --agents ssh db_rsa`
        eval `keychain -q --eval --agents ssh web_rsa`
     fi
   #+END_EXAMPLE

* Man In The Middle

  Es posible que alguien se haga pasar por nuestro servidor,
  por ello es necesario saber y verificar nuestro fingerprint,
  y confiar sólo en los fingerprint que conocemos!

  #+BEGIN_EXAMPLE
    ssh -o StrictHostKeyChecking=yes
  #+END_EXAMPLE

** Obtener fingerprint del servidor

   #+BEGIN_SRC sh :session :results output :exports both
     ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub | tr " " "\n"
   #+END_SRC

   #+RESULTS:
   : 2048
   : ac:4e:79:d1:1d:27:3c:b6:f3:25:ec:36:17:88:c9:72
   : /etc/ssh/ssh_host_rsa_key.pub
   : (RSA)

** Verificar fingerprint al conectarse

   #+BEGIN_SRC sh :session :results output
     ssh-keygen -l -f ~/.ssh/known_hosts | awk '{print $2}' | sort -u
   #+END_SRC

   #+RESULTS:
   : 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
   : 8a:cd:26:6f:94:c2:49:c8:46:2d:53:e7:5b:d4:4c:f8
   : 99:fa:cb:b7:40:fd:08:94:c9:d6:48:f2:6c:0c:4f:d7
   : a9:46:61:95:ca:a3:4b:a8:fe:48:f9:bc:e9:0f:63:47
   : ac:4e:79:d1:1d:27:3c:b6:f3:25:ec:36:17:88:c9:72
   : d6:4e:dc:5b:71:a3:7c:8e:85:f0:fa:4e:80:69:3b:13
   : e7:00:30:cc:2b:a7:b8:8c:2b:85:76:a0:bc:ef:09:91
   : ea:67:d7:52:16:d1:a7:12:15:84:f9:f4:00:17:b5:c0

** fingerprint de nuestra llave local

    #+BEGIN_SRC sh :session :results output :exports both
      ssh-keygen -l -f ~/.ssh/id_rsa.pub | tr " " "\n"
    #+END_SRC

    #+RESULTS:
    : 2048
    : 8f:6b:e1:7e:6a:94:8f:61:a4:db:2a:8a:e8:43:f3:12
    : /home/osiris/.ssh/id_rsa.pub
    : (RSA)

** verificando nuestro fingerprint

    #+BEGIN_SRC sh :session :results output :exports both
      ssh -vvv gin uptime 2>&1 | grep pubkey | tr ' ' '\n'
    #+END_SRC

    #+RESULTS:
    : debug3:
    : send_pubkey_test
    : debug3:
    : sign_and_send_pubkey:
    : RSA
    : 8f:6b:e1:7e:6a:94:8f:61:a4:db:2a:8a:e8:43:f3:12

** fingerprint de la llave permitida en el host remoto

   #+BEGIN_SRC sh :session :results output :exports both
     ssh gin -- ssh-keygen -l -f ~/.ssh/authorized_keys
   #+END_SRC

   #+RESULTS:
   : 2048 8f:6b:e1:7e:6a:94:8f:61:a4:db:2a:8a:e8:43:f3:12   (RSA)
        : 8f:6b:e1:7e:6a:94:8f:61:a4:db:2a:8a:e8:43:f3:12


* SSH Config I

  definir un =host= indicando =hostname= y =port=

  #+BEGIN_SRC sh :session :results output :exports both
    grep -A2 "Host gin$" ~/.ssh/config
  #+END_SRC

  #+RESULTS:
  : Host gin
  :      Hostname 198.23.230.106
  :      Port 22

* SSH Config II

  #+BEGIN_SRC sh :session :results output :exports both
    head -8 ~/.ssh/config
  #+END_SRC

  #+RESULTS:
  : Host *
  :      ControlMaster auto
  :      ControlPath ~/.ssh/.master-%r@%h:%p
  :      ProtocolKeepAlives 30
  :      Compression yes
  :      Protocol 2
  :      CompressionLevel 7
  :      Cipher blowfish

* SSH Config III

  #+BEGIN_SRC sh :session :results output :exports both
    head -16 ~/.ssh/config | tail -8
  #+END_SRC

  #+RESULTS:
  :      ServerAliveCountMax 3
  :      ServerAliveInterval 600
  :      StrictHostKeyChecking yes
  :      VisualHostKey yes
  :      NoHostAuthenticationForLocalhost yes
  :      LogLevel FATAL
  :      UseRoaming no
  :

* Multi SSH Config, porqué?

  - crear "N" alias para cada host
  - compartir acceso a servidores por un equipo
  - versionar cambios en repositorio git
  - definir túneles complejos (muchos saltos)
  - unificar llaves SSH por rol/equipo
  - mejorar la seguridad, =forwardAgent no=, 1 sola llave
  - generar alias =/etc/ansible/hosts=
  - generar alias y grupos de =parallel-ssh=
  - graficar acceso a hosts :)

* Multi SSH Config en 3 pasos

** Obtener repositorio:

   #+BEGIN_EXAMPLE
     git clone https://github.com:osiris/multi-ssh-config.git
   #+END_EXAMPLE

** Configurar los hosts:

   #+BEGIN_SRC sh :session :results output
     cd ~/.ssh/config.d
     find -type f | wc -l
     grep -hr LocalForward * | wc -l
     grep -hr RemoteForward * | wc -l
     grep -hr Port * | sort -u | wc -l
     grep -hr User * | sort -u | wc -l
     grep -hr IdentityFile * | sort -u | wc -l
   #+END_SRC

   #+RESULTS:
   : 491
   : 249
   : 29
   : 97
   : 34
   : 16

** Generar =~/.ssh/config=

   #+BEGIN_EXAMPLE
     ⌂ sshconfig

     Config Directory: /home/osiris/.ssh/config.d
     Backup /home/osiris/.ssh/config to /home/osiris/.ssh/bak/config.1461392552
     Add default to /home/osiris/.ssh/config
     Host agente ...
     Host atusud ...
     Host formulariosatusu ...
     Host fundaciond ...
     Host srcc1001lx ...
     ...

   #+END_EXAMPLE

* compartir es bueno *CC-BY-SA*

  *usted es libre de*:

  - *compartir*, copiar, distribuir, ejecutar
  - *comunicar* públicamente la obra
  - hacer *obras derivadas*
  - hacer un *uso comercial* de esta obra

* gracias!

  - preguntas, dudas y sugerencias a:
    - mailto:OSiUX@OSiUX.com

  - encontrá ésta y otras cuarlas en:
    - http://pub.osiux.com/charlas

  - y el source en:
    - https://github.com/osiris/charlas
